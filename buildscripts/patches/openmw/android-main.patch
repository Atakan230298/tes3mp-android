diff --git a/apps/openmw/CMakeLists.txt b/apps/openmw/CMakeLists.txt
index 5efdd917e..fd5883f3e 100644
--- a/apps/openmw/CMakeLists.txt
+++ b/apps/openmw/CMakeLists.txt
@@ -7,8 +7,7 @@ set(GAME
 )
 
 if (ANDROID)
-    set(GAME ${GAME} android_commandLine.cpp)
-    set(GAME ${GAME} android_main.c)
+    set(GAME ${GAME} android_main.cpp)
 endif()
 
 set(GAME_HEADER
diff --git a/apps/openmw/android_commandLine.cpp b/apps/openmw/android_commandLine.cpp
deleted file mode 100644
index 7e7f368e0..000000000
--- a/apps/openmw/android_commandLine.cpp
+++ /dev/null
@@ -1,27 +0,0 @@
-#include "android_commandLine.h"
-#include "string.h"
-
-const char **argvData;
-int argcData;
-
-extern "C" void releaseArgv();
-
-void releaseArgv() {
-    delete[] argvData;
-}
-
-JNIEXPORT void JNICALL Java_ui_activity_GameActivity_commandLine(JNIEnv *env,
-    jobject obj, jint argc, jobjectArray stringArray) {
-    jboolean iscopy;
-    argcData = (int) argc;
-    argvData = new const char *[argcData + 1];
-    argvData[0] = "openmw";
-    for (int i = 1; i < argcData + 1; i++) {
-        jstring string = (jstring) (env)->GetObjectArrayElement(stringArray,
-                i - 1);
-        argvData[i] = (env)->GetStringUTFChars(string, &iscopy);
-        (env)->DeleteLocalRef(string);
-    }
-    (env)->DeleteLocalRef(stringArray);
-}
-
diff --git a/apps/openmw/android_commandLine.h b/apps/openmw/android_commandLine.h
deleted file mode 100644
index 5ca79c2d0..000000000
--- a/apps/openmw/android_commandLine.h
+++ /dev/null
@@ -1,15 +0,0 @@
-
-/* DO NOT EDIT THIS FILE - it is machine generated */
-#include <jni.h>
-#ifndef _Included_ui_activity_GameActivity_commandLine
-#define _Included_ui_activity_GameActivity_commandLine
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-JNIEXPORT void JNICALL Java_ui_activity_GameActivity_commandLine(JNIEnv *env, jobject obj,jint argcData, jobjectArray stringArray);
-
-#ifdef __cplusplus
-}
-#endif
-#endif
diff --git a/apps/openmw/android_main.c b/apps/openmw/android_main.c
deleted file mode 100644
index d234a369d..000000000
--- a/apps/openmw/android_main.c
+++ /dev/null
@@ -1,45 +0,0 @@
-int stderr = 0; // Hack: fix linker error
-
-#include "SDL_main.h"
-#include <SDL_gamecontroller.h>
-#include <SDL_mouse.h>
-#include <SDL_events.h>
-
-/*******************************************************************************
- Functions called by JNI
- *******************************************************************************/
-#include <jni.h>
-
-/* Called before  to initialize JNI bindings  */
-
-extern void SDL_Android_Init(JNIEnv* env, jclass cls);
-extern int argcData;
-extern const char **argvData;
-void releaseArgv();
-
-
-int Java_org_libsdl_app_SDLActivity_getMouseX(JNIEnv *env, jclass cls, jobject obj) {
-    int ret = 0;
-    SDL_GetMouseState(&ret, NULL);
-    return ret;
-}
-
-
-int Java_org_libsdl_app_SDLActivity_getMouseY(JNIEnv *env, jclass cls, jobject obj) {
-    int ret = 0;
-    SDL_GetMouseState(NULL, &ret);
-    return ret;
-}
-
-int Java_org_libsdl_app_SDLActivity_isMouseShown(JNIEnv *env, jclass cls, jobject obj) {
-    return SDL_ShowCursor(SDL_QUERY);
-}
-
-int Java_org_libsdl_app_SDLActivity_nativeInit(JNIEnv* env, jclass cls, jobject obj) {
-    setenv("OPENMW_DECOMPRESS_TEXTURES", "1", 1);
-
-    // On Android, we use a virtual controller with guid="Virtual"
-    SDL_GameControllerAddMapping("5669727475616c000000000000000000,Virtual,a:b0,b:b1,back:b15,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b16,leftshoulder:b6,leftstick:b13,lefttrigger:a5,leftx:a0,lefty:a1,rightshoulder:b7,rightstick:b14,righttrigger:a4,rightx:a2,righty:a3,start:b11,x:b3,y:b4");
-
-    return 0;
-}
diff --git a/apps/openmw/android_main.cpp b/apps/openmw/android_main.cpp
new file mode 100644
index 000000000..1176384f2
--- /dev/null
+++ b/apps/openmw/android_main.cpp
@@ -0,0 +1,95 @@
+int stderr = 0; // Hack: fix linker error
+
+#include "SDL_main.h"
+#include "engine.hpp"
+#include <SDL_gamecontroller.h>
+#include <SDL_mouse.h>
+#include <SDL_events.h>
+
+#include <osg/GraphicsContext>
+#include <osg/OperationThread>
+
+/*******************************************************************************
+ Functions called by JNI
+ *******************************************************************************/
+#include <jni.h>
+
+/* Called before  to initialize JNI bindings  */
+
+extern void SDL_Android_Init(JNIEnv* env, jclass cls);
+extern int argcData;
+extern const char **argvData;
+void releaseArgv();
+
+
+extern "C" int Java_org_libsdl_app_SDLActivity_getMouseX(JNIEnv *env, jclass cls, jobject obj) {
+    int ret = 0;
+    SDL_GetMouseState(&ret, nullptr);
+    return ret;
+}
+
+
+extern "C" int Java_org_libsdl_app_SDLActivity_getMouseY(JNIEnv *env, jclass cls, jobject obj) {
+    int ret = 0;
+    SDL_GetMouseState(nullptr, &ret);
+    return ret;
+}
+
+extern "C" int Java_org_libsdl_app_SDLActivity_isMouseShown(JNIEnv *env, jclass cls, jobject obj) {
+    return SDL_ShowCursor(SDL_QUERY);
+}
+
+extern SDL_Window *Android_Window;
+extern "C" int SDL_SendMouseMotion(SDL_Window * window, int mouseID, int relative, int x, int y);
+extern "C" void Java_org_libsdl_app_SDLActivity_sendRelativeMouseMotion(JNIEnv *env, jclass cls, int x, int y) {
+    SDL_SendMouseMotion(Android_Window, 0, 1, x, y);
+}
+
+extern "C" int SDL_SendMouseButton(SDL_Window * window, int mouseID, Uint8 state, Uint8 button);
+extern "C" void Java_org_libsdl_app_SDLActivity_sendMouseButton(JNIEnv *env, jclass cls, int state, int button) {
+    SDL_SendMouseButton(Android_Window, 0, state, button);
+}
+
+extern "C" int Java_org_libsdl_app_SDLActivity_nativeInit(JNIEnv* env, jclass cls, jobject obj) {
+    setenv("OPENMW_DECOMPRESS_TEXTURES", "1", 1);
+
+    // On Android, we use a virtual controller with guid="Virtual"
+    SDL_GameControllerAddMapping("5669727475616c000000000000000000,Virtual,a:b0,b:b1,back:b15,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b16,leftshoulder:b6,leftstick:b13,lefttrigger:a5,leftx:a0,lefty:a1,rightshoulder:b7,rightstick:b14,righttrigger:a4,rightx:a2,righty:a3,start:b11,x:b3,y:b4");
+
+    return 0;
+}
+
+extern osg::ref_ptr<osgViewer::Viewer> g_viewer;
+static osg::GraphicsContext *ctx;
+
+class CtxReleaseOperation : public osg::Operation {
+public:
+    virtual void operator () (osg::Object* caller) {
+        ctx->releaseContext();
+    }
+};
+
+class CtxAcquireOperation : public osg::Operation {
+public:
+    virtual void operator () (osg::Object* caller) {
+        ctx->makeCurrent();
+    }
+};
+
+extern "C" void Java_org_libsdl_app_SDLActivity_omwSurfaceDestroyed(JNIEnv *env, jclass cls, jobject obj) {
+    if (!g_viewer)
+        return;
+
+    osg::ref_ptr<CtxReleaseOperation> op = new CtxReleaseOperation();
+    ctx = g_viewer->getCamera()->getGraphicsContext();
+    ctx->add(op);
+}
+
+extern "C" void Java_org_libsdl_app_SDLActivity_omwSurfaceRecreated(JNIEnv *env, jclass cls, jobject obj) {
+    if (!g_viewer)
+        return;
+
+    osg::ref_ptr<CtxAcquireOperation> op = new CtxAcquireOperation();
+    ctx = g_viewer->getCamera()->getGraphicsContext();
+    ctx->add(op);
+}
diff --git a/apps/openmw/engine.cpp b/apps/openmw/engine.cpp
index 8a54ea73c..d15a1af67 100644
--- a/apps/openmw/engine.cpp
+++ b/apps/openmw/engine.cpp
@@ -436,6 +436,10 @@ std::string OMW::Engine::loadSettings (Settings::Manager & settings)
     return settingspath;
 }
 
+// To share the viewer with Android interfaces
+osg::ref_ptr<osgViewer::Viewer> g_viewer;
+
+
 void OMW::Engine::createWindow(Settings::Manager& settings)
 {
     int screen = settings.getInt("screen", "Video");
@@ -533,6 +537,9 @@ void OMW::Engine::createWindow(Settings::Manager& settings)
     mViewer->realize();
 
     mViewer->getEventQueue()->getCurrentEventState()->setWindowRectangle(0, 0, width, height);
+
+    // To share the viewer with Android interfaces
+    g_viewer = mViewer;
 }
 
 void OMW::Engine::setWindowIcon()
